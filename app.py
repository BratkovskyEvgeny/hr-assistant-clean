import base64
import json

import requests
import streamlit as st

from src.utils import analyze_skills, extract_text_from_file

st.set_page_config(
    page_title="HR Assistant",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –°—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.markdown(
    """
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main {
        background-color: #0E1117;
        color: #FFFFFF;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes slideIn {
        from { transform: translateX(-20px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes scaleIn {
        from { transform: scale(0.95); opacity: 0; }
        to { transform: scale(1); opacity: 1; }
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    /* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã */
    .fade-in {
        animation: fadeIn 0.5s ease-out forwards;
    }
    
    .slide-in {
        animation: slideIn 0.5s ease-out forwards;
    }
    
    .scale-in {
        animation: scaleIn 0.5s ease-out forwards;
    }
    
    .pulse {
        animation: pulse 2s infinite;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    h1, h2, h3 {
        color: #FFFFFF;
        font-weight: 600;
        margin-bottom: 1rem;
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
    .stButton>button {
        background-color: #FF4B4B;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        opacity: 0;
        animation: scaleIn 0.5s ease-out forwards;
    }
    
    .stButton>button:hover {
        background-color: #FF6B6B;
        box-shadow: 0 2px 8px rgba(255, 75, 75, 0.3);
        transform: translateY(-2px);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π */
    .stTextArea>div>div>textarea {
        background-color: #262730;
        color: #FFFFFF;
        border: 1px solid #3E3E3E;
        border-radius: 4px;
        transition: all 0.3s ease;
        opacity: 0;
        animation: slideIn 0.5s ease-out forwards;
    }
    
    .stTextArea>div>div>textarea:focus {
        border-color: #FF4B4B;
        box-shadow: 0 0 0 2px rgba(255, 75, 75, 0.2);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ */
    .stProgress .st-bo {
        background-color: #FF4B4B;
        opacity: 0;
        animation: scaleIn 0.5s ease-out forwards;
    }
    
    .stProgress .st-bp {
        background-color: #FF6B6B;
        transition: width 0.5s ease-out;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ */
    .stAlert {
        background-color: #262730;
        border: 1px solid #3E3E3E;
        border-radius: 4px;
        color: #FFFFFF;
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ */
    .stTabs [data-baseweb="tab-list"] {
        background-color: #262730;
        border-radius: 4px;
        padding: 0.5rem;
        opacity: 0;
        animation: slideIn 0.5s ease-out forwards;
    }
    
    .stTabs [data-baseweb="tab"] {
        color: #FFFFFF;
        transition: all 0.3s ease;
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #3E3E3E;
        transform: translateY(-2px);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
    .stMetric {
        background-color: #262730;
        border-radius: 4px;
        padding: 1rem;
        margin: 0.5rem 0;
        opacity: 0;
        animation: scaleIn 0.5s ease-out forwards;
        transition: all 0.3s ease;
    }
    
    .stMetric:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ */
    .skill-item {
        background-color: #262730;
        border-radius: 4px;
        padding: 0.8rem 1.2rem;
        margin: 0.5rem 0;
        border: 1px solid #3E3E3E;
        opacity: 0;
        animation: slideIn 0.5s ease-out forwards;
        transition: all 0.3s ease;
    }
    
    .skill-item:hover {
        transform: translateX(10px);
        background-color: #3E3E3E;
        border-color: #FF4B4B;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ */
    .stFileUploader>div {
        background-color: #262730;
        border: 1px solid #3E3E3E;
        border-radius: 4px;
        padding: 1rem;
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
        transition: all 0.3s ease;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ñ HR Assistant")
st.markdown("""
–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏
- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ
- –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
""")

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    job_description = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
        height=300,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...",
    )

with col2:
    st.subheader("üìÑ –†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    resume_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX)", type=["pdf", "docx"]
    )

    if resume_file:
        resume_text = extract_text_from_file(resume_file)
        st.text_area("–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ", value=resume_text, height=300, disabled=True)
    else:
        resume_text = ""

# –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–æ–≤
st.markdown("### –õ–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–∞")
log_container = st.empty()

# –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
    if not job_description or not resume_text:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    else:
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        analysis = analyze_skills(job_description, resume_text)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        metric_col1, metric_col2, metric_col3 = st.columns(3)

        with metric_col1:
            st.metric("–°—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤", f"{analysis['similarity']:.1%}")

        with metric_col2:
            st.metric(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏",
                len(analysis["missing_tech"] | analysis["missing_other"]),
            )

        with metric_col3:
            st.metric(
                "–õ–∏—à–Ω–∏–µ –Ω–∞–≤—ã–∫–∏", len(analysis["extra_tech"] | analysis["extra_other"])
            )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("#### üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏")
            if analysis["missing_tech"]:
                st.markdown("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:**")
                for skill in sorted(analysis["missing_tech"]):
                    st.markdown(f"- {skill}")
            if analysis["missing_other"]:
                st.markdown("**–î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏:**")
                for skill in sorted(analysis["missing_other"]):
                    st.markdown(f"- {skill}")

        with col2:
            st.markdown("#### ‚úÖ –õ–∏—à–Ω–∏–µ –Ω–∞–≤—ã–∫–∏")
            if analysis["extra_tech"]:
                st.markdown("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:**")
                for skill in sorted(analysis["extra_tech"]):
                    st.markdown(f"- {skill}")
            if analysis["extra_other"]:
                st.markdown("**–î—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏:**")
                for skill in sorted(analysis["extra_other"]):
                    st.markdown(f"- {skill}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.
        
        –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:
        {job_description}
        
        –†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        {resume_text}
        
        –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:
        {', '.join(analysis['missing_tech'] | analysis['missing_other'])}
        
        –õ–∏—à–Ω–∏–µ –Ω–∞–≤—ã–∫–∏:
        {', '.join(analysis['extra_tech'] | analysis['extra_other'])}
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é.
        """

        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            api_url = st.secrets["api"]["kaggle_url"]
            username = st.secrets["kaggle"]["username"]
            key = st.secrets["kaggle"]["key"]

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            payload = {
                "input": {"prompt": prompt, "max_tokens": 1000, "temperature": 0.7}
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth = f"{username}:{key}"
            auth_bytes = auth.encode("ascii")
            base64_auth = base64.b64encode(auth_bytes).decode("ascii")

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
            log_text = []
            log_text.append("=== –î–ï–¢–ê–õ–ò –ó–ê–ü–†–û–°–ê ===")
            log_text.append(f"URL –∑–∞–ø—Ä–æ—Å–∞: {api_url}")
            log_text.append(
                f"Payload –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(payload, indent=2, ensure_ascii=False)}"
            )

            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Basic {base64_auth}",
                "Accept": "application/json",
            }
            log_text.append(
                f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps({k: v if k != 'Authorization' else '***' for k, v in headers.items()}, indent=2)}"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ª–æ–≥–∞–º–∏
            log_container.code("\n".join(log_text), language="text")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                log_text.append("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                log_container.code("\n".join(log_text), language="text")

                response = requests.post(
                    api_url, json=payload, headers=headers, timeout=30, verify=True
                )
                log_text.append("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                log_container.code("\n".join(log_text), language="text")
            except requests.exceptions.SSLError as e:
                log_text.append(f"–û—à–∏–±–∫–∞ SSL: {str(e)}")
                log_container.code("\n".join(log_text), language="text")
                raise Exception("–û—à–∏–±–∫–∞ SSL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API")
            except requests.exceptions.ConnectionError as e:
                log_text.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                log_container.code("\n".join(log_text), language="text")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
            except requests.exceptions.Timeout as e:
                log_text.append(f"–¢–∞–π–º–∞—É—Ç: {str(e)}")
                log_container.code("\n".join(log_text), language="text")
                raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
            log_text.append("=== –î–ï–¢–ê–õ–ò –û–¢–í–ï–¢–ê ===")
            log_text.append(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            log_text.append(
                f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {json.dumps(dict(response.headers), indent=2)}"
            )

            try:
                response_json = response.json()
                log_text.append(
                    f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {json.dumps(response_json, indent=2, ensure_ascii=False)}"
                )
            except:
                log_text.append(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ª–æ–≥–∞–º–∏
            log_container.code("\n".join(log_text), language="text")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                try:
                    result = response.json()
                    if "output" in result and "text" in result["output"]:
                        recommendations = result["output"]["text"]
                    elif "generated_text" in result:
                        recommendations = result["generated_text"]
                    elif "text" in result:
                        recommendations = result["text"]
                    else:
                        error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        log_text.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {result}")
                        log_container.code("\n".join(log_text), language="text")
                        raise Exception(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {error_msg}")
                except json.JSONDecodeError as e:
                    log_text.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {str(e)}")
                    log_text.append(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {response.text}")
                    log_container.code("\n".join(log_text), language="text")
                    raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            else:
                error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                try:
                    error_details = response.json()
                    error_msg += f" - {error_details}"
                except:
                    error_msg += f" - {response.text}"
                log_text.append(f"–û—à–∏–±–∫–∞ API: {error_msg}")
                log_container.code("\n".join(log_text), language="text")
                raise Exception(error_msg)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown(recommendations)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            log_text.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            log_container.code("\n".join(log_text), language="text")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
<div style='text-align: center'>
    <p>–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</p>
    <p>–í–µ—Ä—Å–∏—è 1.0.0</p>
</div>
""",
    unsafe_allow_html=True,
)
